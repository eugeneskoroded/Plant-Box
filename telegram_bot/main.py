import telebot
from telebot import types
import config
import pandas as pd
import requests

dataframe = pd.read_csv("./data/atlas_raw_rb.csv")
cityframe = pd.read_csv("./data/day_light_data.csv")
bot = telebot.TeleBot(config.token)

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
user = bot.get_me()
btn1 = types.KeyboardButton("/start")


is_on_chatbot = 0
is_on_library = 0
is_plant_selected = 0
is_on_city = 0
is_city_selected = 0

class PlantData:
    def __init__(self,plant_data):
        self.plant_data = plant_data
        self.name = self.plant_data["–ù–∞–∑–≤–∞–Ω–∏–µ"]
        self.descr = self.plant_data["–û–ø–∏—Å–∞–Ω–∏–µ"]
        self.atlas = self.plant_data['–ê—Ç–ª–∞—Å']
        self.other = self.plant_data['–î—Ä—É–≥–∏–µ –≤–∏–¥—ã']
        self.areal = self.plant_data['–ê—Ä–µ–∞–ª']
        self.resour = self.plant_data['–†–µ—Å—É—Ä—Å—ã']
        self.vozdel = self.plant_data['–í–æ–∑–¥–µ–ª—ã–≤–∞–Ω–∏–µ']
        self.chem = self.plant_data['–•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤']
        self.raw = self.plant_data['–°—ã—Ä—å—ë']
        self.pharm = self.plant_data['–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞']
        self.redbook = self.plant_data['–ö—Ä–∞—Å–Ω–æ–∫–Ω–∏–∂–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã']

class DayLightData:
    def __init__(self, day_light_data):
        self.day_light_data = day_light_data
        self.city = self.day_light_data["–ì–æ—Ä–æ–¥"]
        self.region = self.day_light_data["–†–µ–≥–∏–æ–Ω"]
        self.district = self.day_light_data['–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥']
        self.dlwin = int(self.day_light_data['–°—Ä–µ–¥–Ω–∏–π —Å–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å (–∑–∏–º–∞)'])
        self.dcwin = int(self.day_light_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–æ–≤—ã—Ö –¥–Ω–µ–π (–∑–∏–º–∞)'])
        self.dlspr = int(self.day_light_data['–°—Ä–µ–¥–Ω–∏–π —Å–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å (–≤–µ—Å–Ω–∞)'])
        self.dcspr = int(self.day_light_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–æ–≤—ã—Ö –¥–Ω–µ–π (–≤–µ—Å–Ω–∞)'])
        self.dlsum = int(self.day_light_data['–°—Ä–µ–¥–Ω–∏–π —Å–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å (–ª–µ—Ç–æ)'])
        self.dcsum = int(self.day_light_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–æ–≤—ã—Ö –¥–Ω–µ–π (–ª–µ—Ç–æ)'])
        self.dlaut = int(self.day_light_data['–°—Ä–µ–¥–Ω–∏–π —Å–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å (–æ—Å–µ–Ω—å)'])
        self.dcaut = int(self.day_light_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–æ–≤—ã—Ö –¥–Ω–µ–π (–æ—Å–µ–Ω—å)'])
        self.dall = int(self.day_light_data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–æ–≤—ã—Ö –¥–Ω–µ–π –≤ –≥–æ–¥—É"])

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")
    btn2 = types.KeyboardButton("‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä".format(message.from_user), reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    print(f"[LOG] {message.from_user.username}: {message.text}")

    if message.text =="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        global is_plant_selected
        is_plant_selected=0
        global is_on_library
        is_on_library = 0
        global is_on_city
        is_on_city = 0
        global is_city_selected
        is_city_selected = 0
        global is_on_chatbot
        is_on_chatbot = 0
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")
        btn2 = types.KeyboardButton("‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id,
                         text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä".format(message.from_user), reply_markup=markup)
    elif message.text == "/help":
         bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤–µ—Ç")
    elif message.text =="‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        bot.send_message(message.from_user.id, u"–ú—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ñ–µ—Ä–º–µ—Ä—Å–∫–∏—Ö —Ö–æ–∑—è–π—Å—Ç–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π. –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É–ª—å—Ç—É—Ä–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –∏ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Ö –ø–æ—Å–µ–≤—É. –û–Ω–∞ —Ç–∞–∫–∂–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ñ–µ—Ä–º–µ—Ä—É –≤—ã–±—Ä–∞—Ç—å –∫—É–ª—å—Ç—É—Ä—ã –ø—Ä–∏–≥–æ–¥–Ω—ã–µ –¥–ª—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ, –Ω–µ —Ç—Ä–∞—Ç—è –≤—Ä–µ–º—è –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
    elif message.text =="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        gen_model = types.KeyboardButton("–ß–∞—Ç–±–æ—Ç")
        library = types.KeyboardButton("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
        city_info = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É")
        return_to_start = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(gen_model,library, city_info, return_to_start)
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", reply_markup=markup)

    elif message.text =="–ß–∞—Ç–±–æ—Ç":
        is_on_chatbot = 1
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        return_to_start = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(return_to_start)
        info = "üëã –ü—Ä–∏–≤–µ—Ç, —è —á–∞—Ç-–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫! –Ø –º–æ–≥—É –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏. \n\nüóí –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.\n‚ùóÔ∏è –£—á—Ç–∏, —á—Ç–æ –º–æ–π –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç –î–í–£–• –¥–æ –ù–ï–°–ö–û–õ–¨–ö–ò–• –ú–ò–ù–£–¢.\n\n –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n - –ö–∞–∫–æ–π –∞—Ä–µ–∞–ª —É –∞–ª–æ—ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ?\n - –ö–∞–∫–æ–π —Ö–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ —É –ª—ë–Ω–∞ –ø–æ—Å–µ–≤–æ–≥–æ?\n - –ö–∞–∫ –ø—Ä–∏–º–µ–Ω—è—é—Ç –≤ –º–µ–¥–∏—Ü–∏–Ω–µ –≤–∞—Å–∏–ª–µ–∫ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–Ω—ã–π?"
        bot.send_message(message.chat.id, text=info, reply_markup=markup)
        

    elif message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É":
        is_on_city = 1
        is_city_selected = 0
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        return_to_start = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(return_to_start)
        bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞", reply_markup=markup)

    elif message.text =="–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫" or message.text=="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫":
        is_plant_selected = 0
        is_on_library = 1
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        return_to_start = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(return_to_start)
        bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è", reply_markup=markup)

    else:
        # –ß–∞—Ç–±–æ—Ç
        if is_on_chatbot == 1:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            return_to_start = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(return_to_start)
            data = {'text': message.text}
            response = requests.post(config.flask_url, data=data)
            # Retrieve the response data
            response_data = response.json()
            # Print the response
            bot.send_message(message.chat.id, text=response_data['response'], reply_markup=markup)
        # –ì–æ—Ä–æ–¥
        if is_on_city==1:
            entered_name = message.text.lower()
            city_names = cityframe["–ì–æ—Ä–æ–¥"]
            similar_cities = []
            is_city_selected = 0
            for index, name in enumerate(city_names):

                if entered_name == name.lower():
                    global dld
                    dld = DayLightData(cityframe.loc[index])

                    is_city_selected = 1
                if index == len(city_names):
                    is_city_selected = 0

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            return_to_start = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(return_to_start)
            if  is_city_selected == 1:
                bot.send_message(message.chat.id, text=f"–í—ã–±—Ä–∞–Ω –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: {dld.city}")
                bot.send_message(message.chat.id, text=f"–†–µ–≥–∏–æ–Ω: {dld.region}")
                bot.send_message(message.chat.id, text=f"–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥: {dld.district}")
                bot.send_message(message.chat.id, text=f"–°—Ä–µ–¥–Ω–∏–π —Å–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å (–∑–∏–º–∞), —á–∞—Å—ã: {dld.dlwin}")
                bot.send_message(message.chat.id, text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–æ–≤—ã—Ö –¥–Ω–µ–π (–∑–∏–º–∞): {dld.dcwin}")
                bot.send_message(message.chat.id, text=f"–°—Ä–µ–¥–Ω–∏–π —Å–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å (–≤–µ—Å–Ω–∞), —á–∞—Å—ã: {dld.dlspr}")
                bot.send_message(message.chat.id, text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–æ–≤—ã—Ö –¥–Ω–µ–π (–≤–µ—Å–Ω–∞): {dld.dcspr}")
                bot.send_message(message.chat.id, text=f"–°—Ä–µ–¥–Ω–∏–π —Å–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å (–ª–µ—Ç–æ), —á–∞—Å—ã: {dld.dlsum}")
                bot.send_message(message.chat.id, text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–æ–≤—ã—Ö –¥–Ω–µ–π (–ª–µ—Ç–æ): {dld.dcsum}")
                bot.send_message(message.chat.id, text=f"–°—Ä–µ–¥–Ω–∏–π —Å–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å (–æ—Å–µ–Ω—å), —á–∞—Å—ã: {dld.dlaut}")
                bot.send_message(message.chat.id, text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–æ–≤—ã—Ö –¥–Ω–µ–π (–æ—Å–µ–Ω—å): {dld.dcaut}")
                bot.send_message(message.chat.id, text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–æ–≤—ã—Ö –¥–Ω–µ–π –≤ –≥–æ–¥—É: {dld.dall}")
                bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞", reply_markup=markup)
            else:
                bot.send_message(message.chat.id, text=f"–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å",reply_markup=markup)
        # C–ø—Ä–∞–≤–æ—á–Ω–∏–∫
        if is_on_library == 1:
            if is_plant_selected!=1:
                entered_name = message.text.lower()
                names = dataframe["–ù–∞–∑–≤–∞–Ω–∏–µ"]
                for index, name in enumerate(names):
                    if entered_name in name:
                        global plant_data
                        plant_data = PlantData(dataframe.loc[index])

                        is_plant_selected = 1

                if is_plant_selected==1:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    descr = types.KeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ")
                    another_tps = types.KeyboardButton("–î—Ä—É–≥–∏–µ –≤–∏–¥—ã")
                    areal = types.KeyboardButton("–ê—Ä–µ–∞–ª")
                    atlas = types.KeyboardButton("–ê—Ç–ª–∞—Å")
                    res = types.KeyboardButton("–†–µ—Å—É—Ä—Å—ã")
                    voz = types.KeyboardButton("–í–æ–∑–¥–µ–ª—ã–≤–∞–Ω–∏–µ")
                    chem = types.KeyboardButton("–•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤")
                    raw = types.KeyboardButton("–°—ã—Ä—å—ë")
                    pharm = types.KeyboardButton("–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞")
                    redbook = types.KeyboardButton("–ö—Ä–∞—Å–Ω–æ–∫–Ω–∏–∂–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã")
                    library = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
                    print(is_on_library, is_plant_selected)
                    return_to_start = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                    markup.add(descr, another_tps, areal,atlas,res,voz,chem,raw,pharm,redbook, library,return_to_start)
                    bot.send_message(message.chat.id, text=f"–í—ã–±—Ä–∞–Ω–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ: {plant_data.name}")
                    bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç", reply_markup=markup)
                else:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    library = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
                    return_to_start = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                    is_on_library = 0
                    markup.add(library, return_to_start)
                    bot.send_message(message.chat.id, text="–†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤", reply_markup=markup)
        try:
            if message.text == "–û–ø–∏—Å–∞–Ω–∏–µ" and is_plant_selected==1:

                    if len(plant_data.descr) > 4095:
                        for x in range(0, len(plant_data.descr), 4095):
                            bot.send_message(message.chat.id, text=plant_data.descr[x:x + 4095])
                    else:
                        bot.send_message(message.chat.id, text=plant_data.descr)
            if message.text == "–ê—Ç–ª–∞—Å" and is_plant_selected==1:

                    if len(plant_data.atlas) > 4095:
                        for x in range(0, len(plant_data.atlas), 4095):
                            bot.send_message(message.chat.id, text=plant_data.atlas[x:x + 4095])
                    else:
                        bot.send_message(message.chat.id, text=plant_data.atlas)
            if message.text == "–î—Ä—É–≥–∏–µ –≤–∏–¥—ã" and is_plant_selected==1:

                    if len(plant_data.other) > 4095:
                        for x in range(0, len(plant_data.other), 4095):
                            bot.send_message(message.chat.id, text=plant_data.other[x:x + 4095])
                    else:
                        bot.send_message(message.chat.id, text=plant_data.other)
            if message.text == "–ê—Ä–µ–∞–ª" and is_plant_selected==1:

                    if len(plant_data.areal) > 4095:
                        for x in range(0, len(plant_data.areal), 4095):
                            bot.send_message(message.chat.id, text=plant_data.areal[x:x + 4095])
                    else:
                        bot.send_message(message.chat.id, text=plant_data.areal)
            if message.text == "–†–µ—Å—É—Ä—Å—ã" and is_plant_selected==1:

                    if len(plant_data.resour) > 4095:
                        for x in range(0, len(plant_data.resour), 4095):
                            bot.send_message(message.chat.id, text=plant_data.resour[x:x + 4095])
                    else:
                        bot.send_message(message.chat.id, text=plant_data.resour)
            if message.text == "–í–æ–∑–¥–µ–ª—ã–≤–∞–Ω–∏–µ" and is_plant_selected==1:

                    if len(plant_data.vozdel) > 4095:
                        for x in range(0, len(plant_data.vozdel), 4095):
                            bot.send_message(message.chat.id, text=plant_data.vozdel[x:x + 4095])
                    else:
                        bot.send_message(message.chat.id, text=plant_data.vozdel)
            if message.text == "–•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤" and is_plant_selected==1:

                    if len(plant_data.chem) > 4095:
                        for x in range(0, len(plant_data.chem), 4095):
                            bot.send_message(message.chat.id, text=plant_data.chem[x:x + 4095])
                    else:
                        bot.send_message(message.chat.id, text=plant_data.chem)
            if message.text == "–°—ã—Ä—å—ë" and is_plant_selected==1:

                    if len(plant_data.raw) > 4095:
                        for x in range(0, len(plant_data.raw), 4095):
                            bot.send_message(message.chat.id, text=plant_data.raw[x:x + 4095])
                    else:
                        bot.send_message(message.chat.id, text=plant_data.raw)
            if message.text == "–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞" and is_plant_selected==1:

                    if len(plant_data.pharm) > 4095:
                        for x in range(0, len(plant_data.pharm), 4095):
                            bot.send_message(message.chat.id, text=plant_data.pharm[x:x + 4095])
                    else:
                        bot.send_message(message.chat.id, text=plant_data.pharm)
            if message.text == "–ö—Ä–∞—Å–Ω–æ–∫–Ω–∏–∂–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã" and is_plant_selected==1:

                    if len(plant_data.redbook) > 4095:
                        for x in range(0, len(plant_data.redbook), 4095):
                            bot.send_message(message.chat.id, text=plant_data.redbook[x:x + 4095])
                    else:
                        bot.send_message(message.chat.id, text=plant_data.redbook)
        except:
            bot.send_message(message.chat.id, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ò–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == "1":
            pass

bot.polling(none_stop=True, interval=0)